#include <vector>
#include <gtest/gtest.h>
#include <challenge.h>

namespace {
TEST(Vector_size_resize, resizing_bigger_changes_size_and_capacity) {
    std::vector<int> v( 5 );
    EXPECT_EQ( v.size(), 5 );
    EXPECT_GE( v.capacity(), 5 );

    v.resize( 10 );
    EXPECT_EQ( v.size(), 10 );
    EXPECT_GE( v.capacity(), 10 );
}

TEST(Vector_size_resize, resizing_smaller_changes_size_but_not_capacity) {
    std::vector<int> v( 5 );
    EXPECT_EQ( v.size(), 5 );
    EXPECT_GE( v.capacity(), 5 );
    v.resize( 0 );

    EXPECT_EQ( v.size(), 0 );
    EXPECT_GE( v.capacity(), 5 );
}

TEST(Vector_size_resize, reserving_bigger_changes_capacity_but_not_size) {
    std::vector<int> v( 5 );
    EXPECT_EQ( v.size(), 5 );
    EXPECT_GE( v.capacity(), 5 );
    v.reserve( 10 );

    EXPECT_EQ( v.size(), 5 );
    EXPECT_GE( v.capacity(), 10 );
}

TEST(Vector_size_resize, reserving_smaller_does_not_change_size_or_capacity) {
    std::vector<int> v( 5 );
    EXPECT_EQ( v.size(), 5 );
    EXPECT_GE( v.capacity(), 5 );
    v.reserve( 0 );

    EXPECT_EQ( v.size(), 5 );
    EXPECT_GE( v.capacity(), 5 );
}

TEST(Counter, Increment) { // Tests the Increment() method.
  Counter c;

  // Test that counter 0 returns 0
  EXPECT_EQ(0, c.Decrement());

  // EXPECT_EQ() evaluates its arguments exactly once, so they
  // can have side effects.

  EXPECT_EQ(0, c.Increment());
  EXPECT_EQ(1, c.Increment());
  EXPECT_EQ(2, c.Increment());

  EXPECT_EQ(3, c.Decrement());
}



}